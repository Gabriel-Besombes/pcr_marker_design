p3_test_out=[{'PRIMER_LEFT': (46, 21),
  'PRIMER_LEFT_SEQUENCE': 'GCATCAGTGAGTACAGCATGC',
  'PRIMER_RIGHT': (132, 20),
  'PRIMER_RIGHT_SEQUENCE': 'TCTCCTCCTTAGCCTGCCTT'},
 {'PRIMER_LEFT': (46, 21),
  'PRIMER_LEFT_SEQUENCE': 'GCATCAGTGAGTACAGCATGC',
  'PRIMER_RIGHT': (139, 20),
  'PRIMER_RIGHT_SEQUENCE': 'CAGTGCGTCTCCTCCTTAGC'},
 {'PRIMER_LEFT': (46, 21),
  'PRIMER_LEFT_SEQUENCE': 'GCATCAGTGAGTACAGCATGC',
  'PRIMER_RIGHT': (143, 20),
  'PRIMER_RIGHT_SEQUENCE': 'CATTCAGTGCGTCTCCTCCT'},
 {'PRIMER_LEFT': (46, 21),
  'PRIMER_LEFT_SEQUENCE': 'GCATCAGTGAGTACAGCATGC',
  'PRIMER_RIGHT': (130, 20),
  'PRIMER_RIGHT_SEQUENCE': 'TCCTCCTTAGCCTGCCTTTG'}]

p3_test_seq=     {
        'SEQUENCE_ID': 'MH1000',
        'SEQUENCE_TEMPLATE': 'GCTTGCATGCCTGCAGGTCGACTCTAGAGGATCCCCCTACATTTT'
                              'AGCATCAGTGAGTACAGCATGCTTACTGGAAGAGAGGGTCATGCA'
                              'ACAGATTAGGAGGTAAGTTTGCAAAGGCAGGCTAAGGAGGAGACG'
                              'CACTGAATGCCATGGTAAGAACTCTGGACATAAAAATATTGGAAG'
                              'TTGTTGAGCAAGTAAAAAAAATGTTTGGAAGTGTTACTTTAGCAA'
                              'TGGCAAGAATGATAGTATGGAATAGATTGGCAGAATGAAGGCAAA'
                            'ATGATTAGACATATTGCATTAAGGTAAAAAATGATAACTGAAGAA'
                              'TTATGTGCCACACTTATTAATAAGAAAGAATATGTGAACCTTGCA'
                              'GATGTTTCCCTCTAGTAG',
        'SEQUENCE_INCLUDED_REGION': [36,342]
    }

p3_test_globals={
        'PRIMER_OPT_SIZE': 20,
        'PRIMER_PICK_INTERNAL_OLIGO': 1,
        'PRIMER_INTERNAL_MAX_SELF_END': 8,
        'PRIMER_MIN_SIZE': 18,
        'PRIMER_MAX_SIZE': 25,
        'PRIMER_OPT_TM': 60.0,
        'PRIMER_MIN_TM': 57.0,
        'PRIMER_MAX_TM': 63.0,
        'PRIMER_MIN_GC': 20.0,
        'PRIMER_MAX_GC': 80.0,
        'PRIMER_MAX_POLY_X': 100,
        'PRIMER_INTERNAL_MAX_POLY_X': 100,
        'PRIMER_SALT_MONOVALENT': 50.0,
        'PRIMER_DNA_CONC': 50.0,
        'PRIMER_MAX_NS_ACCEPTED': 0,
        'PRIMER_MAX_SELF_ANY': 12,
        'PRIMER_MAX_SELF_END': 8,
        'PRIMER_PAIR_MAX_COMPL_ANY': 12,
        'PRIMER_PAIR_MAX_COMPL_END': 8,
        'PRIMER_PRODUCT_SIZE_RANGE': [[75,100],[100,125],[125,150],[150,175],[175,200],[200,225]],
    }
def test_run_P3():
    assert(run_P3(p3_test_seq,p3_test_globals)==p3_test_out)
